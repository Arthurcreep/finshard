// src/components/InvestmentWithdrawalPanel.jsx
import { useMemo, useState, useCallback } from "react";
import { useAccount, useChainId, useSwitchChain, useWalletClient } from "wagmi";
import { encodeFunctionData } from "viem";
import styles from "../styles/InvestmentCards.module.css";

// üëá –ª–∞–π–≤-—Å—Ç–∞—Ç—É—Å —Ä–µ–ª–µ–π–µ—Ä–∞
import { useRelayerSSE } from "../hook/useRelayerSSE";
import RelayerLiveStatus from "./RelayerLiveStatus";

const ABI_WITHDRAW_1 = [
  { type: "function", name: "withdraw", stateMutability: "nonpayable",
    inputs: [{ name: "amount", type: "uint256" }], outputs: [] }
];
const ABI_WITHDRAW_2 = [
  { type: "function", name: "withdraw", stateMutability: "nonpayable",
    inputs: [{ name: "to", type: "address" }, { name: "amount", type: "uint256" }], outputs: [] }
];

function isAddr(v) { return /^0x[a-fA-F0-9]{40}$/.test(String(v || "")); }

export default function InvestmentWithdrawalPanel({
  safeAddress,
  usdtDecimals = 18,
  allowWithdrawTo = true,
  defaultToAddress = "",
  apiBase = "",              // –±–∞–∑–æ–≤—ã–π URL –±—ç–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –ø—Ä–∏ Vite proxy –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∫)
  onDone,
}) {
  const { address } = useAccount();
  const chainId = useChainId();
  const { switchChainAsync } = useSwitchChain();
  const { data: wallet } = useWalletClient();

  const [amount, setAmount] = useState("");
  const [toAddr, setToAddr] = useState(defaultToAddress || "");
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState("");
  const [log, setLog] = useState("");
  const [ok, setOk] = useState(false);

  // hint –æ—Ç –±—ç–∫–∞: –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –≤ BNB –∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–±–∞—É–Ω–¥
  const [serverHint, setServerHint] = useState(null);

  // üëá –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSE –∏ –ø–æ–ª—É—á–∞–µ–º live tick/exec –¥–ª—è UI
  const { tick, lastExec } = useRelayerSSE({ apiBase, user: address });

  const joinUrl = useCallback((base, path) => {
    const b = String(base || "").replace(/\/+$/, "");
    const p = String(path || "").replace(/^\/+/, "");
    return b ? `${b}/${p}` : `/${p}`;
  }, []);

  const needBsc = chainId !== 56;

  const amountRaw = useMemo(() => {
    try {
      if (!amount) return null;
      const [intP, fracP = ""] = String(amount).split(".");
      const frac = (fracP + "0".repeat(usdtDecimals)).slice(0, usdtDecimals);
      return BigInt(intP || "0") * (10n ** BigInt(usdtDecimals)) + BigInt(frac || "0");
    } catch {
      return null;
    }
  }, [amount, usdtDecimals]);

  async function handleSwitchToBsc() {
    try {
      setErr(""); setLog("Switching to BSC (56)...");
      await switchChainAsync?.({ chainId: 56 });
      setLog("Switched to BSC.");
    } catch (e) {
      setErr(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å: ${e?.message || e}`);
    }
  }

  async function handleWithdraw(e) {
    e?.preventDefault?.();
    setErr(""); setLog(""); setOk(false); setServerHint(null);

    if (!address) { setErr("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫"); return; }
    if (!safeAddress || !isAddr(safeAddress)) { setErr("–ù–µ –∑–∞–¥–∞–Ω –∞–¥—Ä–µ—Å —Å–µ–π—Ñ–∞"); return; }
    if (needBsc) { setErr("–ù—É–∂–Ω–∞ —Å–µ—Ç—å BSC (56)"); return; }
    if (!amountRaw || amountRaw <= 0n) { setErr("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞"); return; }
    if (!wallet) { setErr("–ù–µ—Ç walletClient"); return; }

    const dest = (allowWithdrawTo && toAddr) ? toAddr : address;
    if (allowWithdrawTo && toAddr && !isAddr(dest)) { setErr("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è"); return; }

    try {
      setBusy(true);

      // 1) —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –±—ç–∫–µ
      const url = joinUrl(apiBase, "api/withdraw/simulate");
      const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ user: address, contract: safeAddress }),
      });

      // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –¥–∞–∂–µ –ø—Ä–∏ 400
      let payload = {};
      try { payload = await r.clone().json(); } catch {}

      if (!r.ok || payload?.ok !== true) {
        if (payload?.next === "rebound_required" && payload?.hint) {
          setServerHint(payload.hint); // { side, endpoint, body, note }
          setErr("–ü–æ–∑–∏—Ü–∏—è –≤ BNB. –°–Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω—è–µ–º BNB ‚Üí USDT (—Ä–µ–±–∞—É–Ω–¥), –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å.");
        } else {
          setErr(payload?.error || `${r.status} ${r.statusText || ""}`.trim());
        }
        return;
      }

      // 2) —Ñ–æ—Ä–º–∏—Ä—É–µ–º calldata
      const { fn, args } = payload;
      if (!fn || !Array.isArray(args)) { setErr("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç simulate"); return; }

      let data;
      if (args.length === 1) {
        data = encodeFunctionData({ abi: ABI_WITHDRAW_1, functionName: "withdraw", args: [amountRaw] });
      } else if (args.length === 2) {
        data = encodeFunctionData({ abi: ABI_WITHDRAW_2, functionName: "withdraw", args: [dest, amountRaw] });
      } else {
        setErr("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ withdraw");
        return;
      }

      // 3) –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setLog("–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
      const hash = await wallet.sendTransaction({ to: safeAddress, data, value: 0n });
      setLog(`tx: ${hash}`);
      setLog("–í—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
      setOk(true);
      onDone?.();
    } catch (e) {
      setErr(String(e?.message || e));
      console.warn("[withdraw] error:", e);
    } finally {
      setBusy(false);
    }
  }

  async function handleForceRebound() {
    if (!serverHint?.endpoint || !serverHint?.body) return;
    try {
      setBusy(true); setErr(""); setLog(""); setOk(false);
      const url = joinUrl(apiBase, serverHint.endpoint);
      const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(serverHint.body),
      });
      const j = await r.json().catch(() => ({}));

      if (!r.ok || j?.ok === false) {
        setErr(j?.error || j?.note || "–†–µ–±–∞—É–Ω–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω");
        return;
      }
      setLog(`–†–µ–±–∞—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. tx: ${j?.hash || "(—Å–º. –±—ç–∫)"}`);
      setOk(true);
    } catch (e) {
      setErr(String(e?.message || e));
    } finally {
      setBusy(false);
    }
  }

  return (
    <section className={styles.block} style={{ borderTop: "1px solid #eee" }}>
      <div className={styles.field} style={{ marginBottom: 8 }}>
        <span>Withdraw (USDT)</span>
      </div>

      {needBsc && (
        <div className={styles.error} style={{ marginBottom: 8 }}>
          –í—ã –≤ —Å–µ—Ç–∏ ChainId {chainId}. –ù—É–∂–Ω–∞ —Å–µ—Ç—å <b>BSC (56)</b>.{" "}
          <button className={styles.btn} onClick={handleSwitchToBsc} style={{ marginLeft: 8 }}>
            –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å
          </button>
        </div>
      )}

      <div className={styles.field}>
        <span>Amount</span>
        <input
          type="number" min="0" step="0.01"
          value={amount} onChange={(e) => setAmount(e.target.value)}
          placeholder="10"
        />
      </div>

      {allowWithdrawTo && (
        <div className={styles.field}>
          <span>To address</span>
          <input
            type="text"
            value={toAddr}
            onChange={(e) => setToAddr(e.target.value)}
            placeholder={address || "0x..."}
          />
        </div>
      )}

      {log ? <div className={styles.note} style={{ color: "#22c55e", marginTop: 8 }}>{log}</div> : null}
      {err ? <div className={styles.error} style={{ color: "#ef4444", marginTop: 8 }}>{err}</div> : null}
      {ok ? <div className={styles.note} style={{ color: "#16a34a", marginTop: 8 }}>–ì–æ—Ç–æ–≤–æ</div> : null}

      {/* –ï—Å–ª–∏ –±—ç–∫ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–±–∞—É–Ω–¥–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –∫–Ω–æ–ø–∫—É */}
      {serverHint && (
        <div style={{ marginTop: 10, padding: 10, border: "1px solid #e5e7eb", borderRadius: 10 }}>
          <div style={{ fontSize: 12, marginBottom: 8, opacity: 0.9 }}>
            {serverHint.note || "–ü–æ–∑–∏—Ü–∏—è –≤ BNB ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω—è–µ–º BNB –æ–±—Ä–∞—Ç–Ω–æ –≤ USDT, –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å."}
          </div>
          <button
            type="button"
            onClick={handleForceRebound}
            disabled={busy}
            className={`${styles.btn} ${styles.solid}`}
          >
            –°–¥–µ–ª–∞—Ç—å —Ä–µ–±–∞—É–Ω–¥ (SELL)
          </button>
        </div>
      )}

      <div className={styles.modalActions} style={{ marginTop: 10 }}>
        <button
          className={`${styles.btn} ${styles.ghost}`}
          onClick={handleWithdraw}
          disabled={busy || needBsc}
          type="button"
        >
          {busy ? "Withdrawing..." : "Withdraw"}
        </button>
      </div>

      {/* üëá –ª–∞–π–≤-—Å—Ç–∞—Ç—É—Å —Ä–µ–ª–µ–π–µ—Ä–∞ –ø—Ä—è–º–æ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π */}
      <RelayerLiveStatus tick={tick} lastExec={lastExec} />
    </section>
  );
}
